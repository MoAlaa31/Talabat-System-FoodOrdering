// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Talabat.Repository.Data;

#nullable disable

namespace Talabat.Repository.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20250303230955_Change Duration")]
    partial class ChangeDuration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Talabat.Core.Entities.Calender.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PolicyId")
                        .HasColumnType("int");

                    b.Property<int>("RescheduleCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("DoctorId", "AppointmentDate", "AppointmentTime")
                        .IsUnique();

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivePolicyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SlotDurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubSpeciality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivePolicyId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.DoctorPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowFullRefund")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowLastMinuteBooking")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowLateCancellationReschedule")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowMultipleBookingsPerDay")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPartialRefund")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPatientCancellation")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRescheduling")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("MaxBookingsPerPatientPerDay")
                        .HasColumnType("int");

                    b.Property<int>("MaxRescheduleAttempts")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingAdvanceHours")
                        .HasColumnType("int");

                    b.Property<int>("MinCancellationHours")
                        .HasColumnType("int");

                    b.Property<int>("MinRescheduleHours")
                        .HasColumnType("int");

                    b.Property<decimal>("PartialRefundPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("RequirePrePayment")
                        .HasColumnType("bit");

                    b.Property<int>("UnpaidReservationTimeoutMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorPolicies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowFullRefund = true,
                            AllowLastMinuteBooking = true,
                            AllowLateCancellationReschedule = true,
                            AllowMultipleBookingsPerDay = false,
                            AllowPartialRefund = true,
                            AllowPatientCancellation = true,
                            AllowRescheduling = true,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDefault = true,
                            MaxBookingsPerPatientPerDay = 1,
                            MaxRescheduleAttempts = 1,
                            MinBookingAdvanceHours = 2,
                            MinCancellationHours = 24,
                            MinRescheduleHours = 12,
                            PartialRefundPercentage = 50m,
                            RequirePrePayment = true,
                            UnpaidReservationTimeoutMinutes = 30
                        });
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.WorkSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId", "Day", "StartTime")
                        .IsUnique();

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductBrandId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductBrandId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Talabat.Core.Entities.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("Talabat.Core.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.Appointment", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Calender.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Calender.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Calender.DoctorPolicy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.Doctor", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Calender.DoctorPolicy", "ActivePolicy")
                        .WithMany()
                        .HasForeignKey("ActivePolicyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ActivePolicy");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.DoctorPolicy", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Calender.Doctor", "Doctor")
                        .WithMany("Policies")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.WorkSchedule", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Calender.Doctor", "Doctor")
                        .WithMany("WorkSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Product", b =>
                {
                    b.HasOne("Talabat.Core.Entities.ProductBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.ProductBrand", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductBrandId");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Policies");

                    b.Navigation("WorkSchedules");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Calender.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Talabat.Core.Entities.ProductBrand", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
